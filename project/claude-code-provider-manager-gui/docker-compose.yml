version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: claude-code-provider-manager
    ports:
      - "1420:1420"
    environment:
      - NODE_ENV=production
      - APP_CONFIG_PATH=/app/config
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:1420', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: claude-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - claude-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for data persistence (optional)
  postgres:
    image: postgres:15-alpine
    container_name: claude-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=claude_manager
      - POSTGRES_USER=claude_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-claude_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - claude-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_user -d claude_manager"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: claude-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - claude-network

  # Log aggregation (optional)
  fluentd:
    build:
      context: .
      dockerfile: Dockerfile.fluentd
    container_name: claude-fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - ./logs:/fluentd/logs
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - claude-network
    depends_on:
      - app

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - claude-network

  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - claude-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16