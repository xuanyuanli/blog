选题：
    CSS总览。 每个属性的应用


Java资料：
https://www.code-nav.cn/
https://www.pdai.tech
https://github.com/itwanger/toBeBetterJavaer


未完工作：
    找主干之主语、谓语、宾语（太基础可省略）；状语从句、定语从句、名词性从句、同位语


浏览器对行的排版，一般是先行内布局，再确定行的位置，根据行位置计算出行内盒和文字的排版位置。
对块的排版，它总是单独占据一行，计算出交叉轴方向的高度即可


架构师是软件开发中的重要角色，其主要职责是为大型软件系统制定技术方案，确保软件系统的可靠性、可扩展性、可维护性和高性能。一个架构师的工作通常涵盖以下方面：

    技术选型：根据业务需求和技术发展趋势，对软件系统所需的技术进行评估和选择，包括开发语言、框架、数据库、存储、网络、安全等。

    架构设计：根据需求分析，制定软件系统的技术架构，包括系统架构、数据架构、应用架构、安全架构等，以确保系统的稳定性、性能和可维护性。

    系统优化：负责对软件系统进行性能优化、资源利用优化、容错处理、负载均衡等方面的优化工作，以提高系统的性能和可靠性。

    代码审查：对团队成员编写的代码进行审查，确保代码质量、可读性和可维护性，以及与系统架构的一致性。

    团队管理：领导团队进行软件开发工作，负责人员招聘、培训、绩效考核等工作，以确保团队的高效运作。

    技术支持：负责为开发团队和客户提供技术支持，解决技术问题和挑战，提供技术方案和建议。

    项目管理：负责软件项目的规划、进度控制、预算管理、质量管理等工作，以确保项目按时、按质量、按预算完成。

总之，架构师是软件开发中的核心角色，其工作涉及技术选型、架构设计、系统优化、代码审查、团队管理、技术支持和项目管理等方面，以确保软件系统的可靠性、可扩展性、可维护性和高性能。

代码质量之规范篇：
    在Java中，null确实可能导致许多问题，例如NullPointerException。为了减少与null相关的问题，你可以遵循以下规范：

    避免返回null：
    尽量不要在方法中返回null。相反，可以返回空集合、空数组或特殊的空对象（如Optional.empty()）。这有助于消除代码中的null检查。

    使用Optional类：
    Java 8引入了Optional类，它可以帮助你更安全地处理可能为空的值。当你的方法可能返回空值时，使用Optional类型而不是返回null。这样，调用者可以更清楚地了解方法的行为，并且可以使用Optional的方法（如ifPresent、orElse等）来处理空值。

    明确标注@Nullable和@NotNull：
    在方法、参数和字段上使用@Nullable和@NotNull注解，以明确表示值是否可以为null。这有助于提高代码的可读性，同时可以让一些IDE和静态代码分析工具检测潜在的null问题。

    尽量避免null参数：
    尽量避免在方法中接受null参数。在方法签名中使用@NotNull注解，并在方法体中检查参数的有效性。如果参数为null，可以抛出IllegalArgumentException或其他合适的异常。

    使用空对象模式（Null Object Pattern）：
    在某些情况下，可以使用空对象模式来避免null。空对象模式是一种设计模式，它为一个类定义一个特殊的空实例，这个实例不执行任何操作，但避免了null引用。这样，你可以使用空对象而不是null，从而消除NullPointerException的风险。

    在访问对象之前检查null：
    在访问对象的属性或方法之前，确保对象不是null。可以使用条件语句（如if）来检查对象是否为null，并在访问对象之前处理null情况。避免在表达式中链式访问多个属性，因为这可能导致NullPointerException。

    使用工具和IDE进行静态代码分析：
    利用现代IDE（如IntelliJ IDEA、Eclipse等）和静态代码分析工具（如FindBugs、PMD等）来检测潜在的null问题。这些工具可以帮助你在编码过程中发现并修复null相关的问题。

    阿里巴巴、得物、谷歌代码规范
    Effective Java
    代码简洁之道
    架构（DDD、COLA）
    可读性、维护性

遵循Java编码规范：
遵循一致的编码规范和命名约定，使代码易于阅读和维护。可以参考Oracle的Java编码规范，也可以使用Google的Java编码规范。

编写简洁、可读的代码：
避免使用过长的方法和类，保持代码逻辑简单。使用有意义的变量和方法名，添加必要的注释，以提高代码可读性。

重用和模块化：
通过模块化和组件化设计来降低系统的复杂度，提高代码的可重用性和可维护性。

遵循设计模式和原则：
熟悉并遵循常见的设计模式和原则，如SOLID原则，以提高代码的灵活性和扩展性。

编写单元测试和集成测试：
为关键功能编写单元测试和集成测试，确保代码的正确性和稳定性。持续关注测试覆盖率，并在适当的情况下提高测试覆盖率。

使用版本控制系统：
使用版本控制系统（如Git）来管理代码，并遵循一致的分支和提交策略。

使用静态代码分析工具：
使用静态代码分析工具（如FindBugs、PMD、Checkstyle等）来检测代码中的潜在问题和不规范的编码实践。

持续集成和持续交付（CI/CD）：
使用持续集成（CI）和持续交付（CD）工具（如Jenkins、Travis CI、GitHub Actions等）来自动化构建、测试和部署过程，确保代码质量和快速反馈。

性能优化和资源管理：
关注代码的性能，优化算法和数据结构。确保正确管理资源（如内存、文件句柄、数据库连接等），避免资源泄漏。

安全编码实践：
了解并遵循安全编码实践，以防止常见的安全漏洞（如SQL注入、跨站脚本（XSS）等）。使用安全库和API，遵循最佳实践，如使用参数化查询来防止SQL注入。

代码审查：
使用代码审查来提高代码质量，发现潜在问题，并分享知识。可以使用工具（如GitHub、GitLab、Gerrit等）来支持代码审查过程。


代码质量之规范（Java、Mysql、安全、Redis、RESTful、Swagger、单元测试、架构）、工具、审查

主要参考 https://github.com/alibaba/p3c/blob/master/Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C(%E9%BB%84%E5%B1%B1%E7%89%88).pdf

Java：
    Spring系列：容器&Bean生命周期，手写Spring Starter

CSS：
    flex

Linux：
    Grafana、loki
