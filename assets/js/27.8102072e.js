(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{345:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、何为线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、何为线程池"}},[t._v("#")]),t._v(" 一、何为线程池")]),t._v(" "),a("p",[t._v("如果你接触过对线池，比如数据库连接池，他们要解决的问题是：对象的启动耗费资源比较多，最好能做到只启动一次，然后重复使用。我们平常用到"),a("code",[t._v("static final")]),t._v("去修饰常量，也是这个意思。"),a("br"),t._v("\n对于线程来说，启动线程相对来说耗费时间会久一点，而且线程开太多，又会耗费内存，导致GC压力，所以我们需要有控制和管理的手段。"),a("br"),t._v("\n线程池顾名思义就是一个池子，使用了它之后，创建线程变成了从池子获得线程；关闭线程变成了把线程归还给池子。")]),t._v(" "),a("h2",{attrs:{id:"二、先来讲讲executors与executorservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、先来讲讲executors与executorservice"}},[t._v("#")]),t._v(" 二、先来讲讲"),a("code",[t._v("Executors")]),t._v("与"),a("code",[t._v("ExecutorService")])]),t._v(" "),a("p",[t._v("JDK中自然提供了一套线程池的实现，就是"),a("code",[t._v("ThreadPoolExecutor")]),t._v("。"),a("br"),t._v("\n为了更简单的使用"),a("code",[t._v("ThreadPoolExecutor")]),t._v("，JDK提供了线程池工厂类"),a("code",[t._v("Executors")]),t._v("，我们来看看他都与那些工厂方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("newFixedThreadPool(int nThreads)")]),t._v("\t\t构建一个拥有固定线程数量的线程池")]),t._v(" "),a("li",[a("code",[t._v("newSingleThreadExecutor()")]),t._v("\t\t\t\t构建一个只拥有一个线程的线程池")]),t._v(" "),a("li",[a("code",[t._v("newCachedThreadPool()")]),t._v("\t\t\t\t\t构建一个弹性的线程池，需要多少就有多少")]),t._v(" "),a("li",[a("code",[t._v("newSingleThreadScheduledExecutor()")]),t._v("\t\t构建一个只拥有一个线程的计划任务线程池")]),t._v(" "),a("li",[a("code",[t._v("newScheduledThreadPool(int corePoolSize)")]),t._v("\t构建一个弹性的计划任务线程池")])]),t._v(" "),a("p",[t._v("我们先来看一个例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("future"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nexecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们看到了几个新的类，"),a("code",[t._v("Executors")]),t._v("的工厂类方法会返回一个"),a("code",[t._v("ExecutorService")]),t._v("，实际上他是"),a("code",[t._v("ThreadPoolExecutor")]),t._v("的父接口。"),a("br"),t._v(" "),a("code",[t._v("ExecutorService")]),t._v("提供了"),a("code",[t._v("submit()")]),t._v("方法，把一个"),a("code",[t._v("Runnable")]),t._v("或"),a("code",[t._v("Callback")]),t._v("提交到线程池去执行，这里的入参是"),a("code",[t._v("Callback")]),t._v("，"),a("code",[t._v("Callback")]),t._v("是一个回调接口，没有入参但有返回值。"),a("code",[t._v("submit()")]),t._v("方法提交了一个任务之后，会返回一个"),a("code",[t._v("Future")]),t._v("用来表示异步计算的结果，这里也就是获得"),a("code",[t._v("Callback")]),t._v("所返回的结果。"),a("br"),t._v("\n那么如果"),a("code",[t._v("submit()")]),t._v("入参是"),a("code",[t._v("Runnable")]),t._v("呢，这样的话"),a("code",[t._v("Future")]),t._v("一般只会获取到"),a("code",[t._v("null")]),t._v("。"),a("br"),t._v(" "),a("code",[t._v("ExecutorService")]),t._v("是继承自"),a("code",[t._v("Executor")]),t._v("接口，有时你不需要用"),a("code",[t._v("Future")]),t._v("来获取异步计算的结果，只是想从线程池取出线程来执行一些任务，那么可以：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nexecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nexecutorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("需要注意的是线程池创建之后是不会自动关闭的，需要手动调用"),a("code",[t._v("shutdown()")]),t._v("方法，"),a("code",[t._v("ExecutorService")]),t._v("还有一个"),a("code",[t._v("shutdownNow()")]),t._v("方法，表示立即结束，而不是在所有线程工作完成后优雅的结束。")]),t._v(" "),a("h3",{attrs:{id:"_1、scheduledexecutorservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、scheduledexecutorservice"}},[t._v("#")]),t._v(" 1、ScheduledExecutorService")]),t._v(" "),a("p",[t._v("在上面我们看到"),a("code",[t._v("Executors")]),t._v("的工厂方法中有两个会返回"),a("code",[t._v("ScheduledExecutorService")]),t._v("，分别是"),a("code",[t._v("newSingleThreadScheduledExecutor()")]),t._v("和"),a("code",[t._v("newScheduledThreadPool(int corePoolSize)")]),t._v("，这个跟计划任务有关了，类似Linux的at命令。"),a("br"),t._v("\n主要有两个方法来对任务进行周期性的调度：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("scheduleAtFixedRate()")]),t._v("\t\t以上个任务的执行时间为起点，之后的period时间，调度下一次任务")]),t._v(" "),a("li",[a("code",[t._v("scheduleWithFixedDelay()")]),t._v("\t以上个任务的结束时间为起点，经过delay时间进行任务调度")])]),t._v(" "),a("h2",{attrs:{id:"三、重头戏之threadpoolexecutor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、重头戏之threadpoolexecutor"}},[t._v("#")]),t._v(" 三、重头戏之ThreadPoolExecutor")]),t._v(" "),a("p",[a("code",[t._v("Executors")]),t._v("的工厂方法比较合适初学者使用，简单直接。如果你想做一个高玩，那么就不得不去探索一下核心线程池的内部实现了。"),a("br"),t._v("\n来看一下"),a("code",[t._v("Executor")]),t._v("的"),a("code",[t._v("newFixedThreadPool()")]),t._v("方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                  threadFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("会发现他其实是返回了一个"),a("code",[t._v("ThreadPoolExecutor")]),t._v("对象，可以确定"),a("code",[t._v("ThreadPoolExecutor")]),t._v("就是线程池的实现类了，那"),a("code",[t._v("ThreadPoolExecutor")]),t._v("构造函数的这几个参数都是什么意思呢？\n看一下"),a("code",[t._v("ThreadPoolExecutor")]),t._v("最丰富的构造，其他构造都是调用这个的：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),a("p",[t._v("我们一个个来分析一下，会发现他的完善和强大：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("int corePoolSize")]),t._v("\t\t指定了线程池核心（最少）线程数量")]),t._v(" "),a("li",[a("code",[t._v("int maximumPoolSize")]),t._v("\t指定了线程池最大线程数量")]),t._v(" "),a("li",[a("code",[t._v("long keepAliveTime")]),t._v("\t指定了线程存活时间，也就是当有线程被归还的时候，他的存活时间，毕竟线程一直运行着也是耗费资源")]),t._v(" "),a("li",[a("code",[t._v("TimeUnit unit")]),t._v("\t\t\t线程存活时间单位")]),t._v(" "),a("li",[a("code",[t._v("BlockingQueue<Runnable> workQueue")]),t._v("\t\t任务队列，保存被提交但未被执行的任务。如果线程池已满且所有线程都在执行任务，那么后来提交的任务就会暂时保存在这个队列中")]),t._v(" "),a("li",[a("code",[t._v("ThreadFactory threadFactory")]),t._v("\t\t创建线程时用到的线程工厂类")]),t._v(" "),a("li",[a("code",[t._v("RejectedExecutionHandler handler")]),t._v("\t拒绝策略。当任务队列workQueue也满了的时候，再有任务提交到线程池，要通过什么把他拒绝掉")])]),t._v(" "),a("p",[t._v("一下看到这么多，还是挺吓人的。其实前面几个参数还比较通俗易懂，比较难理解的在于后三个参数，我们来一一拆解一下。")]),t._v(" "),a("h3",{attrs:{id:"_1、workqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、workqueue"}},[t._v("#")]),t._v(" 1、workQueue")]),t._v(" "),a("p",[t._v("如果对"),a("code",[t._v("BlockingQueue")]),t._v("不熟悉，请参考"),a("a",{attrs:{href:"https://my.oschina.net/lizaizhong/blog/1840206",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://my.oschina.net/lizaizhong/blog/1840206"),a("OutboundLink")],1),t._v("。"),a("br"),t._v("\n这个"),a("code",[t._v("workQueue")]),t._v("有以下几种选择：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("SynchronousQueue")]),t._v("\t\t这是一个比较特殊的队列，本身没有容量，来一个就得消费一个。可以看到"),a("code",[t._v("Executors.newCachedThreadPool()")]),t._v("就是使用的这个队列，因为"),a("code",[t._v("newCachedThreadPool()")]),t._v("中的"),a("code",[t._v("maximumPoolSize")]),t._v("为无限大")]),t._v(" "),a("li",[a("code",[t._v("ArrayBlockingQueue")]),t._v("\t\t有界队列")]),t._v(" "),a("li",[a("code",[t._v("LinkedBlockingQueue")]),t._v("\t\t无界队列")]),t._v(" "),a("li",[a("code",[t._v("PriorityBlockingQueue")]),t._v("\t\t优先级队列")])]),t._v(" "),a("h3",{attrs:{id:"_2、threadfactory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、threadfactory"}},[t._v("#")]),t._v(" 2、threadFactory")]),t._v(" "),a("p",[a("code",[t._v("threadFactory")]),t._v("顾名思义就是线程工厂。如果我们想对线程池中的线程进行一些自定义配置，那么可以重写"),a("code",[t._v("ThreadFactory")]),t._v("的"),a("code",[t._v("newThread()")]),t._v("方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myThread-"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDaemon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3、rejectedexecutionhandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、rejectedexecutionhandler"}},[t._v("#")]),t._v(" 3、rejectedExecutionHandler")]),t._v(" "),a("p",[t._v("当线程池线程都被取出，并且任务队列里的任务也排满的时候，新进入的任务怎么办？只能被拒绝。"),a("br"),t._v("\nJDK提供了四种拒绝策略，分别如下：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("AbortPolicy")]),t._v("\t\t该策略直接抛出异常，阻止系统正常工作")]),t._v(" "),a("li",[a("code",[t._v("CallerRunsPolicy")]),t._v("\t只要线程池未关闭，该策略直接在调用者（main）线程中运行当前被丢弃的任务。这种策略容易造成调用者线程的性能急剧下降")]),t._v(" "),a("li",[a("code",[t._v("DiscardOldestPolicy")]),t._v("\t\t该策略丢弃任务队列中最老（最早）的一个请求，并尝试再次提交当前任务请求")]),t._v(" "),a("li",[a("code",[t._v("DiscardPolicy")]),t._v("\t\t该策略默默丢弃无法处理的任务")])]),t._v(" "),a("h3",{attrs:{id:"_4、扩展线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、扩展线程池"}},[t._v("#")]),t._v(" 4、扩展线程池")]),t._v(" "),a("p",[a("code",[t._v("ThreadPoolExecutor")]),t._v("的扩展机制类似与拦截器，但并未提供接口方法，而是需要重写这些方法，主要是三个方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MINUTES")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronousQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeExecute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"准备执行"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterExecute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"执行完成"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("terminated")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"线程池退出"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"四、不要使用executors-what"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、不要使用executors-what"}},[t._v("#")]),t._v(" 四、不要使用Executors（What？）")]),t._v(" "),a("p",[t._v("如果仔细查看一下"),a("code",[t._v("Executors")]),t._v("的几个工厂方法，例如"),a("code",[t._v("newSingleThreadExecutor()")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FinalizableDelegatedExecutorService")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MILLISECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("会发现他返回的线程池，请求任务队列是一个无界队列，那么这样容易出现什么问题呢？想必你已经想到了，容易出现任务大量堆积，导致OOM。"),a("br"),t._v("\n其他的工厂方法也存在这个问题，总结起来就是：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("fixedThreadPool")]),t._v("和"),a("code",[t._v("singleThreadPool")]),t._v("请求任务队列为无界队列，容易OOM")]),t._v(" "),a("li",[a("code",[t._v("cachedThreadPool")]),t._v("和"),a("code",[t._v("scheduledThreadPool")]),t._v("创建线程的数量为"),a("code",[t._v("Integer.MAX_VALUE")]),t._v("，容易OOM")])]),t._v(" "),a("p",[a("code",[t._v("Executors")]),t._v("的这个问题，在大型项目中尤其需要注意。所以根据前辈们的血泪史，我们得到的宝贵经验就是：不要使用"),a("code",[t._v("Executors")]),t._v("获得线程池，最好选择自己来构建。")]),t._v(" "),a("h2",{attrs:{id:"五、submit提交任务无异常的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、submit提交任务无异常的问题"}},[t._v("#")]),t._v(" 五、submit提交任务无异常的问题")]),t._v(" "),a("p",[t._v("如果你用线程池提交了一个"),a("code",[t._v("Runnable")]),t._v("任务，例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结果是不会输出任何东西，即使"),a("code",[t._v("Runnable")]),t._v("任务重抛出了异常。为啥会出现这种情况呢？感兴趣的同学可以自己研究下源码，主要涉及的类有"),a("code",[t._v("FutureTask")]),t._v("和"),a("code",[t._v("RunnableAdapter")]),t._v("，主要看"),a("code",[t._v("FutureTask")]),t._v("的run()方法即可了解原因。"),a("br"),t._v("\n不抛异常可是非常危险，为了解决这个问题，建议像线程池提交"),a("code",[t._v("Runnable")]),t._v("类型的任务使用"),a("code",[t._v("execute()")]),t._v("方法比较好！")])])}),[],!1,null,null,null);a.default=e.exports}}]);